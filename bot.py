import asyncio
from aiogram import Router, types
from aiogram.filters.command import Command
from datetime import datetime, timedelta
from dateparser.search import search_dates
from db import add_event, get_events_for_date

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
@router.message(Command("start"))
async def about_cmd(message: types.Message):
    await message.answer(
        "–ë–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ IT-Round.\n"
        "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∑–∞–ø—É—Å–∫—É: https://github.com/Gahav0807/sirius-it-round-schedule-bot\n"
        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
@router.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        """üß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/week ‚Äî –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/add –ù–∞–∑–≤–∞–Ω–∏–µ –î–∞—Ç–∞ –í—Ä–µ–º—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/schedule ‚Äî –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        """
    )

# –ö–æ–º–∞–Ω–¥–∞ /schedule ‚Äî –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@router.message(Command("schedule"))
async def schedule_info(message: types.Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00")

# –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
@router.message(Command("add"))
async def add_cmd(message: types.Message):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ. –§–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞–Ω–∏–µ 2025-07-11 14:00
    """
    from datetime import datetime

    try:
        _, content = message.text.split(maxsplit=1)
        title, date_str, time_str = content.rsplit(" ", 2)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not title.strip():
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
        datetime.strptime(date_str, "%Y-%m-%d")
        datetime.strptime(time_str, "%H:%M")

    except ValueError as e:
        return await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add –ù–∞–∑–≤–∞–Ω–∏–µ 2025-07-11 14:00\n"
            f"{'–û—à–∏–±–∫–∞: ' + str(e) if str(e) else '–ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00'}"
        )
    except Exception:
        return await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00"
        )

    await add_event(message.from_user.id, title.strip(), date_str, time_str)
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{title.strip()}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_str} –≤ {time_str}.")

# –ö–æ–º–∞–Ω–¥–∞ /today ‚Äî —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@router.message(Command("today"))
async def today_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    date_str = datetime.now().strftime("%Y-%m-%d")
    events = await get_events_for_date(date_str, message.from_user.id)
    if not events:
        await message.answer("üì≠ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date_str}):\n" + "\n".join([f"üïí {t} ‚Äî {title}" for title, t in events])
        await message.answer(text)

# –ö–æ–º–∞–Ω–¥–∞ /tomorrow ‚Äî —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@router.message(Command("tomorrow"))
async def tomorrow_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    date_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    events = await get_events_for_date(date_str, message.from_user.id)
    if not events:
        await message.answer("üì≠ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        text = f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date_str}):\n" + "\n".join([f"üïí {t} ‚Äî {title}" for title, t in events])
        await message.answer(text)

# –ö–æ–º–∞–Ω–¥–∞ /week ‚Äî —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
@router.message(Command("week"))
async def week_cmd(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é."""
    today = datetime.now()
    text = "üìÜ –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    found = False
    for i in range(7):
        d = today + timedelta(days=i)
        date_str = d.strftime("%Y-%m-%d")
        events = await get_events_for_date(date_str, message.from_user.id)
        if events:
            found = True
            text += f"\nüìÖ {d.strftime('%A %d.%m')}:\n"
            text += "\n".join([f"  üïí {t} ‚Äî {title}" for title, t in events]) + "\n"
    if not found:
        await message.answer("üì≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def unknown_cmd(message: types.Message):
    if message.text and message.text.startswith("/"):
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ ‚Äî /help.")
