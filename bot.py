import logging
from datetime import datetime, timedelta
from typing import Final
from aiogram import Router, types
from aiogram.filters.command import Command
from db import (
    add_event, set_notifications_enabled, get_notifications_enabled,
    set_remind_before, get_remind_before, delete_event, get_events_for_date_with_id,
    get_all_events_for_user, set_event_status
)

router = Router()

TAG_COLORS = {
    "—É—á–µ–±–∞": "üü¶",
    "–¥–æ—Å—É–≥": "üü©",
    "—Å–ø–æ—Ä—Ç": "üüß",
    "–≤–∞–∂–Ω–æ–µ": "üü•",
}
TAG_LABELS = {
    "—É—á–µ–±–∞": "—É—á—ë–±–∞",
    "–¥–æ—Å—É–≥": "–¥–æ—Å—É–≥",
    "—Å–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç",
    "–≤–∞–∂–Ω–æ–µ": "–≤–∞–∂–Ω–æ–µ",
}

ABOUT_TEXT: Final[str] = (
    "–ë–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ IT-Round.\n"
    "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∑–∞–ø—É—Å–∫—É: https://github.com/Gahav0807/sirius-it-round-schedule-bot\n\n"
    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ /help"
)
NO_EVENTS_TODAY: Final[str] = "üì≠ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
NO_EVENTS_TOMORROW: Final[str] = "üì≠ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
NO_EVENTS_WEEK: Final[str] = "üì≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
UNKNOWN_COMMAND: Final[str] = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
ONLY_COMMANDS: Final[str] = "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ ‚Äî /help."
ALLTASKS_ERROR: Final[str] = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á."
TODAY_ERROR: Final[str] = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
TOMORROW_ERROR: Final[str] = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
WEEK_ERROR: Final[str] = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–¥–µ–ª—é."

# --- –°–¢–ê–¢–£–°–ù–´–ï –°–ú–ê–ô–õ–ò–ö–ò ---
STATUS_ICONS = {
    'done': '‚úÖ',
    'overdue': '‚ùå',
    'active': '‚è≥',
}

def get_status_icon(status: str, event_date: str, event_time: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–∞–π–ª–∏–∫-—Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏.
    """
    from datetime import datetime
    if status == 'done':
        return STATUS_ICONS['done']
    dt = datetime.strptime(f"{event_date} {event_time}", "%Y-%m-%d %H:%M")
    if status == 'overdue' or (status == 'active' and dt < datetime.now()):
        return STATUS_ICONS['overdue']
    return STATUS_ICONS['active']

DONE_USAGE: Final[str] = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /done [id] (id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π)"
DONE_OK: Final[str] = "‚úÖ –ó–∞–¥–∞—á–∞ #{id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
DONE_FAIL: Final[str] = "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é."
ALLTASKS_EMPTY: Final[str] = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è."
ALLTASKS_HEADER: Final[str] = "üóÇÔ∏è –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
ALLTASKS_HINT: Final[str] = "<b>-–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: /done [id]\n</b>"
DONE_HINT: Final[str] = "<b>-–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π: /done [id]\n</b>"
DELETE_HINT: Final[str] = "<b>-–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [id]</b>"
DELETE_USAGE: Final[str] = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete [id] (id –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π)"
DELETE_OK: Final[str] = "üóëÔ∏è –°–æ–±—ã—Ç–∏–µ #{id} —É–¥–∞–ª–µ–Ω–æ."
DELETE_FAIL: Final[str] = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—ã—Ç–∏—é."
NOTIFY_ON: Final[str] = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å ‚Äî /notify off"
NOTIFY_OFF: Final[str] = "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å ‚Äî /notify on"
NOTIFY_USAGE: Final[str] = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /notify on –∏–ª–∏ /notify off"
REMIND_STATUS: Final[str] = "‚è∞ –°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ {minutes} –º–∏–Ω. –¥–æ —Å–æ–±—ã—Ç–∏—è.\n–ò–∑–º–µ–Ω–∏—Ç—å: /remind N"
REMIND_OK: Final[str] = "‚è∞ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ {minutes} –º–∏–Ω. –¥–æ —Å–æ–±—ã—Ç–∏—è."
REMIND_FAIL: Final[str] = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –æ—Ç 1 –¥–æ 1440. –ü—Ä–∏–º–µ—Ä: /remind 30"
ADD_FORMAT_ERROR: Final[str] = "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add –ù–∞–∑–≤–∞–Ω–∏–µ YYYY-MM-DD HH:MM [—Ç–µ–≥]\n–û—à–∏–±–∫–∞: {error}"
ADD_UNKNOWN_ERROR: Final[str] = "‚ùó –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã."
ADD_PAST_ERROR: Final[str] = "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º."
ADD_TITLE_ERROR: Final[str] = "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."
ADD_DATA_ERROR: Final[str] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
ADD_OK: Final[str] = "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"

@router.message(Command("help"))
async def help_cmd(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.
    """
    today = datetime.now().strftime("%Y-%m-%d")
    help_text = (
        "üß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/week ‚Äî –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        f"/add –ù–∞–∑–≤–∞–Ω–∏–µ –î–∞—Ç–∞ –í—Ä–µ–º—è [—Ç–µ–≥] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/schedule ‚Äî –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
        "/notify on|off ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/remind N ‚Äî –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å\n"
        "/alltasks - –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª –≤ –±–æ—Ç–∞\n"
        "/done [id] - –æ—Ç–º–µ—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º\n"
        "/delete [id] - —É–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ"
        "\n\nüé® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–µ–≥–∏: —É—á–µ–±–∞, –¥–æ—Å—É–≥, —Å–ø–æ—Ä—Ç, –≤–∞–∂–Ω–æ–µ (—Ü–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞)."
    )
    await message.answer(help_text)

@router.message(Command("start"))
async def about_cmd(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.
    """
    await message.answer(ABOUT_TEXT)

@router.message(Command("schedule"))
async def schedule_info(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /add.
    """
    now = datetime.now()
    today = now.strftime("%Y-%m-%d")
    time = (now + timedelta(hours=2)).strftime("%H:%M")
    schedule_text = (
        "–§–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞–Ω–∏–µ YYYY-MM-DD HH:MM [—Ç–µ–≥]\n\n"
        "–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n"
        f"\n/add –í—Å—Ç—Ä–µ—á–∞ {today} {time} –¥–æ—Å—É–≥\n\n"
        "–¢–µ–≥–∏: —É—á–µ–±–∞üü¶, –¥–æ—Å—É–≥üü©, —Å–ø–æ—Ä—Çüüß, –≤–∞–∂–Ω–æ–µüü• (—Ü–≤–µ—Ç–æ–≤–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞)"
    )
    await message.answer(schedule_text)

@router.message(Command("add"))
async def add_cmd(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    text = message.text
    try:
        _, content = text.split(maxsplit=1)
        parts = content.strip().split()
        if len(parts) < 3:
            raise ValueError(ADD_DATA_ERROR)
        tag = ""
        if len(parts) >= 4 and parts[-1].lower() in TAG_COLORS:
            tag = parts[-1].lower()
            time_str = parts[-2]
            date_str = parts[-3]
            title = " ".join(parts[:-3])
        else:
            time_str = parts[-1]
            date_str = parts[-2]
            title = " ".join(parts[:-2])
        if not title.strip():
            raise ValueError(ADD_TITLE_ERROR)
        dt = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        if dt < datetime.now():
            raise ValueError(ADD_PAST_ERROR)
    except ValueError as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /add: {e}")
        return await message.answer(ADD_FORMAT_ERROR.format(error=e))
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /add: {e}")
        return await message.answer(ADD_UNKNOWN_ERROR)
    await add_event(user_id, title.strip(), date_str, time_str, tag)
    await message.answer(ADD_OK)

@router.message(Command("today"))
async def today_cmd(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    try:
        date_str = datetime.now().strftime("%Y-%m-%d")
        events = await get_events_for_date_with_id(date_str, message.from_user.id)
        if not events:
            await message.answer(NO_EVENTS_TODAY)
        else:
            text = "\n".join([
                f"{get_status_icon(status, date_str, t)} #{event_id} {TAG_COLORS.get(tag, '')} {t} ‚Äî {title}{f' [{TAG_LABELS[tag]}]' if tag else ''}"
                for event_id, title, t, tag, status in events
            ])
            text += f"\n\n{DONE_HINT}\n{DELETE_HINT}"
            await message.answer(f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date_str}):\n" + text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {e}")
        await message.answer(TODAY_ERROR)

@router.message(Command("tomorrow"))
async def tomorrow_cmd(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    try:
        date_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        events = await get_events_for_date_with_id(date_str, message.from_user.id)
        if not events:
            await message.answer(NO_EVENTS_TOMORROW)
        else:
            text = "\n".join([
                f"{get_status_icon(status, date_str, t)} #{event_id} {TAG_COLORS.get(tag, '')} {t} ‚Äî {title}{f' [{TAG_LABELS[tag]}]' if tag else ''}"
                for event_id, title, t, tag, status in events
            ])
            text += f"\n\n{DONE_HINT}\n{DELETE_HINT}"
            await message.answer(f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date_str}):\n" + text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tomorrow: {e}")
        await message.answer(TOMORROW_ERROR)

@router.message(Command("week"))
async def week_cmd(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.
    """
    try:
        today = datetime.now()
        found = False
        week_text = "üìÜ –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%Y-%m-%d")
            events = await get_events_for_date_with_id(date_str, message.from_user.id)
            if events:
                found = True
                day_text = f"\nüìÖ {d.strftime('%A %d.%m')}:\n" + "\n".join([
                    f"{get_status_icon(status, date_str, t)} #{event_id} {TAG_COLORS.get(tag, '')} {t} ‚Äî {title}{f' [{TAG_LABELS[tag]}]' if tag else ''}"
                    for event_id, title, t, tag, status in events
                ])
                week_text += day_text + "\n"
        if not found:
            await message.answer(NO_EVENTS_WEEK)
        else:
            week_text += f"\n{DONE_HINT}\n{DELETE_HINT}"
            await message.answer(week_text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /week: {e}")
        await message.answer(WEEK_ERROR)

@router.message(Command("delete"))
async def delete_cmd(message: types.Message) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –µ—ë id, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer(DELETE_USAGE)
        return
    event_id = int(args[1])
    ok = await delete_event(event_id, user_id)
    if ok:
        await message.answer(DELETE_OK.format(id=event_id))
    else:
        await message.answer(DELETE_FAIL)

@router.message(Command("notify"))
async def notify_cmd(message: types.Message) -> None:
    """
    –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) == 1:
        enabled = await get_notifications_enabled(user_id)
        if enabled:
            await message.answer(NOTIFY_ON)
        else:
            await message.answer(NOTIFY_OFF)
        return
    if args[1].lower() == "on":
        await set_notifications_enabled(user_id, True)
        await message.answer(NOTIFY_ON)
    elif args[1].lower() == "off":
        await set_notifications_enabled(user_id, False)
        await message.answer(NOTIFY_OFF)
    else:
        await message.answer(NOTIFY_USAGE)

@router.message(Command("remind"))
async def remind_cmd(message: types.Message) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) == 1:
        minutes = await get_remind_before(user_id)
        await message.answer(REMIND_STATUS.format(minutes=minutes))
        return
    try:
        minutes = int(args[1])
        if not (1 <= minutes <= 1440):
            raise ValueError
        await set_remind_before(user_id, minutes)
        await message.answer(REMIND_OK.format(minutes=minutes))
    except Exception:
        await message.answer(REMIND_FAIL)

@router.message(Command("done"))
async def done_cmd(message: types.Message) -> None:
    """
    –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø–æ –µ—ë id.
    """
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer(DONE_USAGE)
        return
    event_id = int(args[1])
    ok = await set_event_status(event_id, user_id, 'done')
    if ok:
        await message.answer(DONE_OK.format(id=event_id))
    else:
        await message.answer(DONE_FAIL)

# --- –û–ë–ù–û–í–õ–Ø–ï–ú –í–´–í–û–î –í–°–ï–• –ó–ê–î–ê–ß ---
@router.message(Command("alltasks"))
async def alltasks_cmd(message: types.Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.
    """
    try:
        user_id = message.from_user.id
        events = await get_all_events_for_user(user_id)
        if not events:
            await message.answer(ALLTASKS_EMPTY)
            return
        text = "\n".join([
            f"{get_status_icon(status, date, time)} #{event_id} {date} {time} {TAG_COLORS.get(tag, '')} {title}{f' [{TAG_LABELS[tag]}]' if tag else ''}"
            for event_id, title, date, time, tag, status in events
        ])
        text += f"\n\n{DONE_HINT}\n{DELETE_HINT}"
        await message.answer(ALLTASKS_HEADER + text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /alltasks: {e}")
        await message.answer(ALLTASKS_ERROR)

@router.message()
async def unknown_cmd(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if message.text and message.text.startswith("/"):
        logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        await message.answer(UNKNOWN_COMMAND)
    else:
        await message.answer(ONLY_COMMANDS)
