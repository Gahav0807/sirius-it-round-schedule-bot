import asyncio
from aiogram import Router, types
from aiogram.filters.command import Command
from datetime import datetime, timedelta
from db import add_event, get_events_for_date
from typing import Final
import logging

router = Router()

# –°–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç—ã
ABOUT_TEXT: Final[str] = (
    "–ë–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ IT-Round.\n"
    "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∑–∞–ø—É—Å–∫—É: https://github.com/Gahav0807/sirius-it-round-schedule-bot\n\n"
    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥: /help"
)
HELP_TEXT: Final[str] = (
    "üß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
    "/tomorrow ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
    "/week ‚Äî –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
    "/add –ù–∞–∑–≤–∞–Ω–∏–µ –î–∞—Ç–∞ –í—Ä–µ–º—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
    "/schedule ‚Äî –ø—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
)
SCHEDULE_EXAMPLE: Final[str] = "–ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00"
ADD_FORMAT_ERROR: Final[str] = (
    "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add –ù–∞–∑–≤–∞–Ω–∏–µ 2025-07-11 14:00\n–ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00"
)
NO_EVENTS_TODAY: Final[str] = "üì≠ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
NO_EVENTS_TOMORROW: Final[str] = "üì≠ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
NO_EVENTS_WEEK: Final[str] = "üì≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
UNKNOWN_COMMAND: Final[str] = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
ONLY_COMMANDS: Final[str] = "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ ‚Äî /help."

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def about_cmd(message: types.Message) -> None:
    await message.answer(ABOUT_TEXT)

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@router.message(Command("help"))
async def help_cmd(message: types.Message) -> None:
    await message.answer(HELP_TEXT)

# –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@router.message(Command("schedule"))
async def schedule_info(message: types.Message) -> None:
    await message.answer(SCHEDULE_EXAMPLE)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ /add
@router.message(Command("add"))
async def add_cmd(message: types.Message) -> None:
    try:
        _, content = message.text.split(maxsplit=1)
        title, date_str, time_str = content.rsplit(" ", 2)
        if not title.strip():
            raise ValueError("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ datetime-–æ–±—ä–µ–∫—Ç
        event_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if event_datetime < now:
            raise ValueError("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º.")

    except ValueError as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /add: {e}")
        return await message.answer(
            f"‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /add –ù–∞–∑–≤–∞–Ω–∏–µ 2025-07-11 14:00\n–û—à–∏–±–∫–∞: {e}" if str(e) else ADD_FORMAT_ERROR
        )
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /add: {e}")
        return await message.answer(ADD_FORMAT_ERROR)

    await add_event(message.from_user.id, title.strip(), date_str, time_str)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ '{title.strip()}' –Ω–∞ {date_str} {time_str}")
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{title.strip()}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_str} –≤ {time_str}.")
    
# –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
@router.message(Command("today"))
async def today_cmd(message: types.Message) -> None:
    try:
        date_str = datetime.now().strftime("%Y-%m-%d")
        events = await get_events_for_date(date_str, message.from_user.id)
        if not events:
            await message.answer(NO_EVENTS_TODAY)
        else:
            text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date_str}):\n" + "\n".join([f"üïí {t} ‚Äî {title}" for title, t in events])
            await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /today: {e}")

# –°–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@router.message(Command("tomorrow"))
async def tomorrow_cmd(message: types.Message) -> None:
    try:
        date_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        events = await get_events_for_date(date_str, message.from_user.id)
        if not events:
            await message.answer(NO_EVENTS_TOMORROW)
        else:
            text = f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date_str}):\n" + "\n".join([f"üïí {t} ‚Äî {title}" for title, t in events])
            await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tomorrow: {e}")

# –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
@router.message(Command("week"))
async def week_cmd(message: types.Message) -> None:
    try:
        today = datetime.now()
        text = "üìÜ –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
        found = False
        for i in range(7):
            d = today + timedelta(days=i)
            date_str = d.strftime("%Y-%m-%d")
            events = await get_events_for_date(date_str, message.from_user.id)
            if events:
                found = True
                text += f"\nüìÖ {d.strftime('%A %d.%m')}:\n"
                text += "\n".join([f"  üïí {t} ‚Äî {title}" for title, t in events]) + "\n"
        if not found:
            await message.answer(NO_EVENTS_WEEK)
        else:
            await message.answer(text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /week: {e}")

# –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Ç–µ–∫—Å—Ç
@router.message()
async def unknown_cmd(message: types.Message) -> None:
    if message.text and message.text.startswith("/"):
        logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        await message.answer(UNKNOWN_COMMAND)
    else:
        await message.answer(ONLY_COMMANDS)
