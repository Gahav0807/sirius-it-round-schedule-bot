import asyncio
from aiogram import Router, types
from aiogram.filters.command import Command
from datetime import datetime, timedelta
from dateparser.search import search_dates
from db import add_event, get_events_for_date

router = Router()

@router.message(Command("start", "help"))
async def help_cmd(message: types.Message):
    await message.answer("""üß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/tomorrow ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞
/week ‚Äî –Ω–∞ –Ω–µ–¥–µ–ª—é
/add –ù–∞–∑–≤–∞–Ω–∏–µ –î–∞—Ç–∞ –í—Ä–µ–º—è ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
/schedule ‚Äî –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
""")

@router.message(Command("schedule"))
async def schedule_info(message: types.Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00")

@router.message(Command("add"))
async def add_cmd(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        return await message.answer("‚ùó –ü—Ä–∏–º–µ—Ä: /add –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-11 14:00")

    content = args[1]
    result = search_dates(content, languages=["ru"])

    if not result:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")

    date_text, parsed = result[-1]  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    title = content.replace(date_text, "").strip(" ,‚Äì‚Äî")

    date_str = parsed.strftime("%Y-%m-%d")
    time_str = parsed.strftime("%H:%M")

    if not title:
        title = "–°–æ–±—ã—Ç–∏–µ"

    await add_event(message.from_user.id, title, date_str, time_str)
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {date_str} –≤ {time_str}.")

@router.message(Command("today"))
async def today_cmd(message: types.Message):
    date_str = datetime.now().strftime("%Y-%m-%d")
    events = await get_events_for_date(date_str, message.from_user.id)
    if not events:
        await message.answer("üì≠ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date_str}):\n" + "\n".join([f"üïí {t} ‚Äî {title}" for title, t in events])
        await message.answer(text)

@router.message(Command("tomorrow"))
async def tomorrow_cmd(message: types.Message):
    date_str = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    events = await get_events_for_date(date_str, message.from_user.id)
    if not events:
        await message.answer("üì≠ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        text = f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date_str}):\n" + "\n".join([f"üïí {t} ‚Äî {title}" for title, t in events])
        await message.answer(text)

@router.message(Command("week"))
async def week_cmd(message: types.Message):
    today = datetime.now()
    text = "üìÜ –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    found = False
    for i in range(7):
        d = today + timedelta(days=i)
        date_str = d.strftime("%Y-%m-%d")
        events = await get_events_for_date(date_str, message.from_user.id)
        if events:
            found = True
            text += f"\nüìÖ {d.strftime('%A %d.%m')}:\n"
            text += "\n".join([f"  üïí {t} ‚Äî {title}" for title, t in events]) + "\n"
    if not found:
        await message.answer("üì≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        await message.answer(text)
